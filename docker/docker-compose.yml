version: "3.9"

x-restart-policy: &restart_policy
  restart: unless-stopped

x-project-defaults: &project_defaults
  <<: *restart_policy
  networks:
    - geocam_nw
  env_file: .env

services:
  traefik:
    <<: *project_defaults
    image: ${TRAEFIK_IMAGE-traefik:v2.6}
    depends_on:
      frontend:
        condition: service_healthy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro

  api:
    <<: *project_defaults
    image: ${API_IMAGE-registry.gitlab.com/natural-solutions/geonature/annotation:api-dev}
    build:
      context: ../api
      dockerfile: Dockerfile
      target: development
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/openapi.json"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 20s
    depends_on:
      db:
        condition: service_healthy
      minio:
        condition: service_healthy
    labels:
      - traefik.enable=true
      - traefik.http.routers.api.rule=PathPrefix(`/api/v1`)
      - traefik.http.routers.api.entrypoints=web
      - traefik.http.routers.api.middlewares=api-stripprefix
      - traefik.http.middlewares.api-stripprefix.stripprefix.prefixes=/api/v1

  deepfaune:
    <<: *project_defaults
    build:
      context: ../deepfaune
      dockerfile: Dockerfile
      target: development
    depends_on:
      broker:
        condition: service_healthy
    labels:
      - traefik.enable=true
      - traefik.http.routers.deepfaune.rule=PathPrefix(`/deepfaune`)
      - traefik.http.routers.deepfaune.entrypoints=web
      - traefik.http.routers.deepfaune.middlewares=api-stripprefix
      - traefik.http.middlewares.deepfaune-stripprefix.stripprefix.prefixes=/deepfaune

  broker:
    <<: *project_defaults
    image: redis:7-alpine
    command: redis-server --save 20 1 --loglevel warning --requirepass ${REDIS_PWD}
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    volumes: 
      - broker:/data

  frontend:
    <<: *project_defaults
    image: ${FRONTEND_IMAGE-registry.gitlab.com/natural-solutions/geonature/annotation:frontend-dev}
    build:
      context: ../frontend
      dockerfile: Dockerfile
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    labels:
      - traefik.enable=true
      - traefik.http.routers.frontend.rule=PathPrefix(`/`)
      - traefik.http.routers.frontend.entrypoints=web

  db:
    <<: *project_defaults
    image: postgres:14-alpine
    healthcheck:      
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER-dbuser} -d ${DB_NAME-annotation} -h 127.0.0.1"]     
      interval: 10s      
      timeout: 5s      
      retries: 3      
      start_period: 60s
    volumes:
      - db_data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD-dbpassword}
      POSTGRES_DB: ${DB_NAME-annotation}      
      POSTGRES_USER: ${DB_USER-dbuser}

  keycloak:
    <<: *project_defaults
    image: quay.io/keycloak/keycloak:18.0.2
    command: start-dev
    labels:
      - traefik.enable=true
      - traefik.http.routers.keycloak.rule=${TRAEFIK_ROUTER_RULE_KEYCLOAK-PathPrefix(`/auth`)}
      - traefik.http.routers.keycloak.entrypoints=web

  minio:
    <<: *project_defaults
    image: minio/minio
    volumes:
      - minio_data:/data
    healthcheck:      
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]      
      interval: 30s      
      timeout: 20s      
      retries: 3
    command: server --console-address :9001 /data

volumes:
  db_data:
  minio_data:
  broker:


networks:
  geocam_nw:
    external: false